{
  "hash": "34d18f251ae3cd4747fa674a7148f340",
  "result": {
    "markdown": "# NB: R Markdown\n\n## Introduction\n\nR provides a notebook style coding environment similar to Jupyter.\n\n-   It follows the **literate programming** paradigm of **inter-leaving text and code**.\n-   It uses a version of [Markdown](https://www.markdownguide.org/) to create the text components.\n-   It allows executable **code blocks**.\n-   They can be used interactively or as **exported** documents into standard formats.\n\nHow, the R approach differs in some important ways:\n\n-   RMarkdown is **not visually rendered** while your are editing.\n    -   The document has to be 'knitted' to see this.\n    -   Newer versions of RStudio have a **visual mode** that does render Markdown, and also allows you to edit in this mode.\n    -   This differs from Jupyter's cell-by-cell approach.\n-   RMarkdown **allows several programming languages** to be run in the same notebook.\n-   RMarkdown files are meant to be *published documents*, not work spaces for coding.\n-   RMarkdown is written in markdown and uses [YAML](https://yaml.org/) to store configuration information.\n    -   Jupyter notebooks are written in **JavaScript**, which contains both configuration data and content data in the same structure.\n    -   This difference is what accounts for the different editing experiences. JavaScript is the native programming language of web browsers; the notebook format is executable code that can be integrated into a web application.\n\n## Varieties of R Markdown outputs\n\nR Markdown is designed to be output to several formats:\n\n-   **R Notebooks**\n    -   Designed to previewed\n    -   Or output to `(html|pdf|doc)_notebook`\n    -   Have Preview in RStudio toolbar (but also Knit in menu)\n-   **Documents**\n    -   Output to `(html|pdf|doc)_document`\n    -   Has Knit in RStudio toolbar\n-   **Presentations**\n    -   Produce slideshows from your source file, in ioslides, beamer, or powerpoint.\n-   **Shiny**\n    -   Create interactive apps that can be published on the web.\n\n## Knitting\n\nKnitting is the process of compiling all the code and visual assets of an RMarkdown into a single file.\n\n## Publishing\n\nRMarkdown has publication in mind as an outcome.\n\nRStudio allows you to publish in these destinations:\n\n-   [RPubs](https://rpubs.com/)\n\n-   [R Studio Connect](https://www.rstudio.com/products/connect/)\n\n## Outputting\n\nThere are two ways to set the output of a document:\n\n1.  Permanently, by modifying the YAML header:\n\n    ``` yaml\n    title: \"Viridis Demo\"\n    output: html_document\n    ```\n\n2.  Transiently, by calling `rmarkdown::render()` by hand:\n\n\n    ::: {.cell hash='M12-02-RMarkdown_cache/html/unnamed-chunk-2_6919d01b471b6f2b17ec2d30e3700601'}\n    \n    ```{.r .cell-code}\n    rmarkdown::render(\"diamond-sizes.Rmd\", output_format = \"word_document\")\n    ```\n    :::\n\n\n    This is useful if you want to programmatically produce multiple types of output.\n\nRStudio's knit button renders a file to the first format listed in its `output` field.\n\nYou can also do it by code:\n\n```         \nknitr::include_graphics(\"screenshots/rmarkdown-knit.png\")\n```\n\nEach output format is associated with an R function.\n\nYou can either write `foo` or `pkg::foo`.\n\nIf you omit `pkg`, the default is assumed to be rmarkdown.\n\nIt's important to know the name of the function that makes the output because that's where you get help.\n\nFor example, to figure out what parameters you can set with `html_document`, look at `?rmarkdown::html_document`.\n\n### Output options\n\nTo override the default parameter values, you need to use an expanded `output` field. For example, if you wanted to render an `html_document` with a floating table of contents, you'd use:\n\n``` yaml\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n```\n\nYou can even render to multiple outputs by supplying a list of formats:\n\n``` yaml\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n  pdf_document: default\n```\n\nNote the special syntax if you don't want to override any of the default options.\n\n## How It Works\n\n![](images/paste-7C07E815.png)\n\n## The RMarkdown Spec\n\nSee [The RMarkown Reference Guide](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf?_ga=2.194053733.950222666.1657155877-187437491.1653052010) and [RStudio's Guide](https://rmarkdown.rstudio.com/lesson-1.html).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}